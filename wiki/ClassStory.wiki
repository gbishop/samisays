#summary Story Class Breakdown

= Class Story =

*Description*

Contains data structures and methods for a single story made up of a title and multiple sound clips. Sound clips are strings of bytes in wave format with the properties (bits, sample rate, etc.) defined in Constants.

*Primary Data Structures*

The clips in the story are stored in a list (zipClips) as compressed (using zlib) bytestrings representing the sound for each clip in wav format.  Each clip has an associated type, which can be found by indexing the type list.  The different possible types are NON (none), REC (recorded sound), SND (inserted sound), SFX (sound manipulation), BRK (break – only in teacher template), and LCK (lock – only inserted by teachers).  Most of these are simply used as statistics to be displayed in the story creation visualizer.  However, BRK and LCK have special functions related to teacher templates.  BRK is used to define the endpoints of ranges of clips that will be merged during teacher template assignment.  LCK is used to make clips undeletable and this type is automatically assigned to all clips in an assigned teacher template.  The clips added by the student, however, are not locked.  Any clip that is deleted is added to the beginning of the trash list, which can be accessed in the sound library.  Once a story is exited, the trash is cleared (it is not saved to disk).  The other important datastructures are two thread locks and a semaphore which are used in the threaded saving (described below).  These are also not saved to disk so new ones are created each time a story is created or loaded.

*Storage on Disk*

There are two pickled (pickling is a way of storing objects on disk) instances of this class for each story.  One has the justTitle flag set to True and only contains the title of the story.  It is pickled as the story name with ‘.ttl’.  The other is the entire story and it is pickled as the story name with ‘.pkl’.  Only one story is loaded into the global env dictionary at a time.  Initially, only the title is loaded so that it can be quickly played during story selection without a delay.  Any function requiring the full story first calls loadFullStory() in to load the other pickle if necessary.  The pickles are stored in he user’s directory, which is specified as ‘_<student name>’ in the STUDENT_DIR.  The story and title pickles are created each time the story or title is changed, respectively (see below).

*Threaded Saving* 

In order to ensure no stories are lost due to system crashes, etc., the story is saved (pickled) after each change is made.  Pickling, however, can be time consuming for larger stories.  Keeping the clips in a compressed format (described above) and lowering the sample rate helps, but does not get rid of the problem.  Threading the save function (PickleStory) does solve the problem.  To do threaded saves efficiently, we use following design.  If a save is called and there are no other threads spawned (tested by a counting semaphore), a thread is spawned.  If a single thread is already spawned and it has begun pickling (tested by a binary semaphore), a thread is spawned.  If two threads are spawned, we do nothing.  When two threads are spawned, one must be pickling and the other waiting.  Because the waiter will pickle the newest version of the story available when the thread ahead of it completes pickling, it is not necessary to spawn another thread.  The data structures that will be pickled are protected by locks ensuring they are not accessed by functions in the main process that will alter them and corrupted mid-pickle.  A copy of the story is made and the copy is pickled so that the lock can be released on the original structures for story creation to continue without delay.  When the story is exited, the program blocks until all outstanding threads complete to avoid the race condition where a story is quickly reopened and pickling has not completed.